load("//bazel:tachyon_cc.bzl", "tachyon_cc_library", "tachyon_cc_unittest")

package(default_visibility = ["//visibility:public"])

tachyon_cc_library(
    name = "assigned_cell",
    hdrs = ["assigned_cell.h"],
    deps = [
        ":cell",
        "//tachyon/zk/base:value",
    ],
)

tachyon_cc_library(
    name = "assignment",
    hdrs = ["assignment.h"],
    deps = [
        ":challenge",
        ":column_key",
        ":selector",
        "//tachyon/base/functional:callback",
        "//tachyon/math/base:rational_field",
        "//tachyon/zk/base:value",
    ],
)

tachyon_cc_library(
    name = "cell",
    hdrs = ["cell.h"],
    deps = [
        ":column_key",
        "//tachyon:export",
        "@com_google_absl//absl/strings",
    ],
)

tachyon_cc_library(
    name = "challenge",
    hdrs = ["challenge.h"],
    deps = [
        ":phase",
        "@com_google_absl//absl/strings",
    ],
)

tachyon_cc_library(
    name = "challenge_stringifier",
    hdrs = ["challenge_stringifier.h"],
    deps = [
        ":challenge",
        ":phase_stringifier",
    ],
)

tachyon_cc_library(
    name = "circuit",
    hdrs = ["circuit.h"],
    deps = [
        ":layouter",
        "//tachyon/zk/plonk/circuit/floor_planner",
    ],
)

tachyon_cc_library(
    name = "column_key",
    hdrs = ["column_key.h"],
    deps = [
        ":column_type",
        ":phase",
        "@com_google_absl//absl/strings",
    ],
)

tachyon_cc_library(
    name = "column_key_stringifier",
    hdrs = ["column_key_stringifier.h"],
    deps = [
        ":column_key",
        ":column_type_stringifier",
    ],
)

tachyon_cc_library(
    name = "column_type",
    srcs = ["column_type.cc"],
    hdrs = ["column_type.h"],
    deps = ["//tachyon/base:logging"],
)

tachyon_cc_library(
    name = "column_type_stringifier",
    hdrs = ["column_type_stringifier.h"],
    deps = [
        ":column_type",
        "//tachyon/base/strings:rust_stringifier",
    ],
)

tachyon_cc_library(
    name = "constraint",
    hdrs = ["constraint.h"],
    deps = ["//tachyon/zk/expressions:expression"],
)

tachyon_cc_library(
    name = "gate",
    hdrs = ["gate.h"],
    deps = [
        ":selector",
        ":virtual_cell",
        "//tachyon/zk/expressions:expression",
    ],
)

tachyon_cc_library(
    name = "layouter",
    hdrs = [
        "layouter.h",
        "namespaced_layouter.h",
    ],
    deps = [
        ":challenge",
        ":lookup_table",
        ":region",
        "//tachyon/base/functional:callback",
        "//tachyon/zk/plonk:constraint_system",
    ],
)

tachyon_cc_library(
    name = "lookup_table",
    hdrs = ["lookup_table.h"],
    deps = [
        ":lookup_table_column",
        "//tachyon/math/base:rational_field",
        "//tachyon/zk/base:value",
    ],
)

tachyon_cc_library(
    name = "lookup_table_column",
    hdrs = ["lookup_table_column.h"],
    deps = [
        ":column_key",
        "//tachyon:export",
    ],
)

tachyon_cc_library(
    name = "owned_table",
    hdrs = ["owned_table.h"],
    deps = [":table_base"],
)

tachyon_cc_library(
    name = "phase",
    hdrs = ["phase.h"],
    deps = [
        "//tachyon/base/strings:string_number_conversions",
        "@com_google_absl//absl/hash",
    ],
)

tachyon_cc_library(
    name = "phase_stringifier",
    hdrs = ["phase_stringifier.h"],
    deps = [
        ":phase",
        "//tachyon/base/strings:rust_stringifier",
    ],
)

tachyon_cc_library(
    name = "query",
    hdrs = ["query.h"],
    deps = [
        ":column_key",
        ":rotation",
    ],
)

tachyon_cc_library(
    name = "query_stringifier",
    hdrs = ["query_stringifier.h"],
    deps = [
        ":column_key_stringifier",
        ":query",
        ":rotation_stringifier",
    ],
)

tachyon_cc_library(
    name = "ref_table",
    hdrs = ["ref_table.h"],
    deps = [":table_base"],
)

tachyon_cc_library(
    name = "region",
    hdrs = ["region.h"],
    deps = [
        ":assigned_cell",
        ":column_key",
        ":selector",
        "//tachyon/base/functional:callback",
    ],
)

tachyon_cc_library(
    name = "region_column",
    hdrs = ["region_column.h"],
    deps = [
        ":column_key",
        ":selector",
    ],
)

tachyon_cc_library(
    name = "region_shape",
    hdrs = ["region_shape.h"],
    deps = [
        ":region",
        ":region_column",
        "@com_google_absl//absl/container:flat_hash_set",
    ],
)

tachyon_cc_library(
    name = "rotation",
    hdrs = ["rotation.h"],
    deps = [
        "//tachyon/base:logging",
        "//tachyon/base/numerics:checked_math",
        "//tachyon/base/strings:string_number_conversions",
        "//tachyon/math/polynomials/univariate:univariate_evaluation_domain",
    ],
)

tachyon_cc_library(
    name = "rotation_stringifier",
    hdrs = ["rotation_stringifier.h"],
    deps = [
        ":rotation",
        "//tachyon/base/strings:rust_stringifier",
    ],
)

tachyon_cc_library(
    name = "selector",
    hdrs = ["selector.h"],
    deps = [
        "//tachyon:export",
        "@com_google_absl//absl/hash",
        "@com_google_absl//absl/strings",
    ],
)

tachyon_cc_library(
    name = "selector_assignment",
    hdrs = ["selector_assignment.h"],
    deps = ["//tachyon/zk/expressions:expression"],
)

tachyon_cc_library(
    name = "selector_compressor",
    hdrs = ["selector_compressor.h"],
    deps = [
        ":selector_assignment",
        ":selector_description",
        "//tachyon/base/containers:adapters",
        "//tachyon/base/containers:cxx20_erase",
        "//tachyon/base/functional:callback",
        "//tachyon/zk/expressions:expression_factory",
    ],
)

tachyon_cc_library(
    name = "selector_description",
    hdrs = ["selector_description.h"],
    deps = ["//tachyon:export"],
)

tachyon_cc_library(
    name = "table_base",
    hdrs = ["table_base.h"],
    deps = [
        ":column_key",
        "//tachyon/base:logging",
        "//tachyon/base:ref",
        "//tachyon/base/containers:container_util",
        "@com_google_absl//absl/types:span",
    ],
)

tachyon_cc_library(
    name = "virtual_cell",
    hdrs = ["virtual_cell.h"],
    deps = [
        ":column_key",
        ":rotation",
        "//tachyon:export",
    ],
)

tachyon_cc_library(
    name = "virtual_cells",
    hdrs = ["virtual_cells.h"],
    deps = [
        ":selector",
        ":virtual_cell",
        "//tachyon/zk/expressions:expression_factory",
    ],
)

tachyon_cc_unittest(
    name = "circuit_unittests",
    srcs = [
        "column_key_unittest.cc",
        "lookup_table_column_unittest.cc",
        "phase_unittest.cc",
        "ref_table_unittest.cc",
        "region_column_unittest.cc",
        "rotation_unittest.cc",
        "selector_unittest.cc",
    ],
    deps = [
        ":column_key",
        ":lookup_table_column",
        ":ref_table",
        ":region_column",
        ":rotation",
        "//tachyon/math/elliptic_curves/bn/bn254:g1",
        "//tachyon/math/finite_fields/test:gf7",
        "//tachyon/math/polynomials/univariate:univariate_polynomial",
        "@com_google_absl//absl/hash:hash_testing",
    ],
)
